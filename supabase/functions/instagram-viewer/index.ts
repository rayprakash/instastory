
// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

// Define CORS headers for browser requests
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Main handler function
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }
  
  try {
    const url = new URL(req.url);
    const path = url.pathname.split('/').filter(Boolean);
    
    if (path[1] === 'profile') {
      const username = path[2];
      return await handleProfileRequest(username);
    } else if (path[1] === 'stories') {
      const username = path[2];
      return await handleStoriesRequest(username);
    } else if (path[1] === 'posts') {
      const username = path[2];
      return await handlePostsRequest(username);
    } else if (path[1] === 'highlights') {
      const username = path[2];
      return await handleHighlightsRequest(username);
    } else if (path[1] === 'reels') {
      const username = path[2];
      return await handleReelsRequest(username);
    }

    return new Response(JSON.stringify({ error: 'Invalid endpoint' }), { 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400 
    });

  } catch (error) {
    console.error('Error processing request:', error);
    return new Response(JSON.stringify({ error: error.message }), { 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500 
    });
  }
});

// Handler for profile data requests
async function handleProfileRequest(username: string) {
  console.log(`Fetching profile for ${username}`);
  
  try {
    // For now, return mock data - in production you would integrate with Instagram API
    const profile = {
      username: username,
      fullName: `${username.charAt(0).toUpperCase() + username.slice(1)}`,
      profilePicture: `https://source.unsplash.com/random/150x150?sig=${Math.floor(Math.random() * 1000)}`,
      bio: 'This is a placeholder bio generated by the Instagram Viewer API',
      followers: Math.floor(Math.random() * 50000),
      following: Math.floor(Math.random() * 1000),
      postsCount: Math.floor(Math.random() * 200),
      isPrivate: false
    };
    
    return new Response(JSON.stringify(profile), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error(`Error fetching profile for ${username}:`, error);
    return new Response(JSON.stringify({ error: 'Failed to fetch profile data' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
}

// Handler for stories data requests
async function handleStoriesRequest(username: string) {
  console.log(`Fetching stories for ${username}`);
  
  try {
    // For now, return mock data - in production you would integrate with Instagram API
    const stories = Array(3).fill(null).map((_, index) => ({
      id: `story${index + 1}`,
      mediaType: index === 2 ? 'VIDEO' : 'IMAGE',
      mediaUrl: index === 2 
        ? 'https://player.vimeo.com/external/394276111.sd.mp4?s=1ed0f6082ebbfe8e6b0aa56b200011609f3da00d&profile_id=164&oauth2_token_id=57447761'
        : `https://source.unsplash.com/random/800x1000?sig=${index + 100}`,
      timestamp: new Date(Date.now() - (index + 1) * 3600000).toISOString(),
      username: username
    }));
    
    return new Response(JSON.stringify({ stories }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error(`Error fetching stories for ${username}:`, error);
    return new Response(JSON.stringify({ error: 'Failed to fetch stories data' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
}

// Handler for posts data requests
async function handlePostsRequest(username: string) {
  console.log(`Fetching posts for ${username}`);
  
  try {
    // For now, return mock data - in production you would integrate with Instagram API
    const posts = Array(6).fill(null).map((_, index) => ({
      id: `post${index + 1}`,
      mediaType: index % 3 === 2 ? 'VIDEO' : index % 3 === 1 ? 'CAROUSEL' : 'IMAGE',
      mediaUrl: index % 3 === 2 
        ? 'https://player.vimeo.com/external/363625327.sd.mp4?s=4c475c79473408872518be22d98427a2d7aaa5d2&profile_id=164&oauth2_token_id=57447761'
        : `https://source.unsplash.com/random/1080x1080?sig=${index + 200}`,
      caption: ['Beautiful sunset #nofilter #travel', 'Amazing weekend getaway with friends', 'Waves crashing on the shore #beach #summer', 'Morning coffee views', 'City lights #nightphotography', 'Forest walk #nature'][index],
      likes: Math.floor(Math.random() * 5000),
      comments: Math.floor(Math.random() * 200),
      timestamp: new Date(Date.now() - (index + 1) * 86400000).toISOString(),
      thumbnail: index % 3 !== 0 ? `https://source.unsplash.com/random/1080x1080?sig=${index + 201}` : undefined
    }));
    
    return new Response(JSON.stringify({ posts }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error(`Error fetching posts for ${username}:`, error);
    return new Response(JSON.stringify({ error: 'Failed to fetch posts data' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
}

// Handler for highlights data requests
async function handleHighlightsRequest(username: string) {
  console.log(`Fetching highlights for ${username}`);
  
  try {
    // For now, return mock data - in production you would integrate with Instagram API
    const highlights = Array(2).fill(null).map((_, index) => ({
      id: `highlight${index + 1}`,
      mediaType: 'IMAGE',
      mediaUrl: `https://source.unsplash.com/random/800x1000?sig=${index + 300}`,
      timestamp: new Date(Date.now() - (index + 30) * 86400000).toISOString(),
      username: username
    }));
    
    return new Response(JSON.stringify({ highlights }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error(`Error fetching highlights for ${username}:`, error);
    return new Response(JSON.stringify({ error: 'Failed to fetch highlights data' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
}

// Handler for reels data requests
async function handleReelsRequest(username: string) {
  console.log(`Fetching reels for ${username}`);
  
  try {
    // For now, return mock data - in production you would integrate with Instagram API
    const reels = Array(2).fill(null).map((_, index) => ({
      id: `reel${index + 1}`,
      mediaType: 'VIDEO',
      mediaUrl: [
        'https://player.vimeo.com/external/470407576.sd.mp4?s=df3223786cca6e471c3bec83e0d027be46899ea2&profile_id=164&oauth2_token_id=57447761',
        'https://player.vimeo.com/external/371713390.sd.mp4?s=4106e58353bd6bdc303deaaa3faa8e26b1a0098e&profile_id=164&oauth2_token_id=57447761'
      ][index],
      caption: ['Beach day! #summervibes', 'Coffee art #barista'][index],
      likes: Math.floor(Math.random() * 6000),
      comments: Math.floor(Math.random() * 300),
      timestamp: new Date(Date.now() - (index + 7) * 86400000).toISOString(),
      thumbnail: `https://source.unsplash.com/random/1080x1920?sig=${index + 400}`
    }));
    
    return new Response(JSON.stringify({ reels }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error(`Error fetching reels for ${username}:`, error);
    return new Response(JSON.stringify({ error: 'Failed to fetch reels data' }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
}
